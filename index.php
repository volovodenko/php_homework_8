<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <title>Выполнение домашнего задания PHP от 15.03.2018</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
<h1>Выполнение домашнего задания PHP от 15.02.2018</h1>
<h2>volovodenko@gmail.com</h2>
<br>
<p><b>Работа с классами и объектами</b>
</p>
<br>
<hr>
<br>

<ol>
    <li>
        <a href="oop/load.php?task=1&dir=1">
            Сделайте класс Worker, в котором будут следующие public поля
            - name (имя), age (возраст), salary (зарплата).
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=2&dir=2">
            Создайте объект этого класса, затем установите поля в следующие значения
            (не в __construct, а для созданного объекта) -
            имя 'Иван', возраст 25, зарплата 1000.
            Создайте второй объект этого класса,
            установите поля в следующие значения - имя 'Вася', возраст 26, зарплата 2000.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=3&dir=3">
            Выведите на экран сумму зарплат Ивана и Васи. Выведите на экран сумму возрастов Ивана и Васи.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=4&dir=4">
            Сделайте класс Worker, в котором будут следующие private поля - name (имя), age (возраст), salary (зарплата)
            и следующие public методы setName, getName, setAge, getAge, setSalary, getSalary.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=5&dir=5">
            Создайте 2 объекта этого класса: 'Иван', возраст 25, зарплата 1000 и 'Вася', возраст 26, зарплата 2000.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=6&dir=6">
            Выведите на экран сумму зарплат Ивана и Васи. Выведите на экран сумму возрастов Ивана и Васи.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=7&dir=7">
            Дополните класс Worker из предыдущей задачи private методом checkAge,
            который будет проверять возраст на корректность (от 1 до 100 лет).
            Этот метод должен использовать метод setAge перед установкой нового возраста
            (если возраст не корректный - он не должен меняться).
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=8&dir=8">
            Сделайте класс Worker, в котором будут следующие private поля - name (имя), salary (зарплата).
            Сделайте так, чтобы эти свойства заполнялись в методе __construct при создании объекта
            (вот так: new Worker(имя, возраст) ). Сделайте также public методы getName, getSalary.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=9&dir=9">
            Создайте объект этого класса 'Дима', возраст 25, зарплата 1000.
            Выведите на экран произведение его возраста и зарплаты.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=10&dir=10">
            Сделайте класс User, в котором будут следующие protected поля - name (имя), age (возраст),
            public методы setName, getName, setAge, getAge.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=11&dir=11">
            Сделайте класс Worker, который наследует от класса User и вносит дополнительное
            private поле salary (зарплата), а также методы public getSalary и setSalary.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=12&dir=12">
            Создайте объект этого класса 'Иван', возраст 25, зарплата 1000.
            Создайте второй объект этого класса 'Вася', возраст 26, зарплата 2000. Найдите сумму зарплата Ивана и Васи.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=13&dir=13">
            Сделайте класс Student, который наследует от класса User и вносит дополнительные
            private поля стипендия, курс, а также геттеры и сеттеры для них.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=14&dir=14">
            Сделайте класс Driver (Водитель), который будет наследоваться от класса Worker из предыдущей задачи.
            Этот метод должен вносить следующие private поля: водительский стаж, категория вождения (A, B, C).
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=15&dir=15">
            Создайте класс Form - оболочку для создания форм.
            Он должен иметь методы input, submit, password, textarea, open, close.
            Каждый метод принимает массив атрибутов.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=16&dir=16">
            Создайте класс SmartForm, который будет наследовать от Form из предыдущей
            задачи и сохранять значения инпутов и textarea после отправки.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=17&dir=17">
            Создайте класс Cookie - оболочку над работой с куками.
            Класс должен иметь следующие методы: установка куки set(имя куки, ее значение),
            получение куки get(имя куки), удаление куки del(имя куки).
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=18&dir=18">
            Создайте класс Session - оболочку над сессиями.
            Он должен иметь следующие методы: создать переменную сессии, получить переменную,
            удалить переменную сессии, проверить наличие переменной сессии.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=19&dir=19">
            Реализуйте класс Flash, который будет использовать внутри себя класс Session из предыдущей задачи
            (именно использовать, а не наследовать).
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=20&dir=20">
            Создайте класс-оболочку Db над базами данных.
            Класс должен иметь следующие методы: получение данных, удаление данных, редактирование данных,
            подсчет данных, очистка таблицы, очистка таблиц.
        </a>
    </li>
    <li>
        <a href="oop/load.php?task=21&dir=21">
            Создайте класс Log для ведения логов.
            Этот класс должен иметь следующие методы: сохранить в лог, получить последние N записей,
            очистить таблицу с логами.
        </a>
    </li>



</ol>
<br>
</body>
</html>